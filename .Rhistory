,`2020-07-13-1232`
,`2020-07-13-1233`
,`2020-07-13-1234`
,`2020-07-13-1235`
,`2020-07-13-1193`
,`2020-07-13-992`
,`2020-07-13-1065`
,`2020-07-13-26`
,`2020-07-13-40`
,`2020-07-13-1281`
,`2020-07-13-20`
,`2020-07-13-1111`
,`2020-07-13-28`
,`2020-07-13-37`
,`2020-07-13-1224`
,`2020-07-13-53`
,`2020-07-13-1078`
,`2020-07-13-523`
,`2020-07-13-11`
,`2020-07-13-1132`
,`2020-07-13-784`
,`2020-07-13-9`
,`2020-07-13-14`
,`2020-07-13-1123`
,`2020-07-13-359`
,`2020-07-13-10`
,`2020-07-13-169`
,`2020-07-13-1094`
,`2020-07-13-1298`
,`2020-07-13-8`
,`2020-07-13-1214`
,`2020-07-13-378`
,`2020-07-13-1180`
,`2020-07-13-1034`
,`2020-07-13-1089`
,`2020-07-13-33`
,`2020-07-13-36`
,`2020-07-13-39`
,`2020-07-13-25`
,`2020-07-13-706`
,`2020-07-13-51`
,`2020-07-13-984`
,`2020-07-13-55`
,`2020-07-13-734`
,`2020-07-13-1128`
,`2020-07-13-1152`
,`2020-07-13-1074`
,`2020-07-13-49`
,`2020-07-13-56`
,`2020-07-13-770`
,`2020-07-13-981`
,`2020-07-13-380`
,`2020-07-13-43`
,`2020-07-13-1100`
,`2020-07-13-5`
,`2020-07-13-763`
,`2020-07-13-363`
,`2020-07-13-176`
,`2020-07-13-985`
,`2020-07-13-24`
,`2020-07-13-720`
,`2020-07-13-983`
,`2020-07-13-1120`
,`2020-07-13-782`
,`2020-07-13-35`
,`2020-07-13-1083`
,`2020-07-13-1103`
,`2020-07-13-48`
,`2020-07-13-1113`
,`2020-07-13-999`
,`2020-07-13-1229`
,`2020-07-13-988`
,`2020-07-13-1085`
,`2020-07-13-1131`
,`2020-07-13-1142`
,`2020-07-13-1129`
,`2020-07-13-29`
,`2020-07-13-1130`
,`2020-07-13-749`
,`2020-07-13-1098`
,`2020-07-13-537`
,`2020-07-13-16`
,`2020-07-13-1282`
,`2020-07-13-1087`
,`2020-07-13-534`
,`2020-07-13-1255`
,`2020-07-13-767`
,`2020-07-13-54`
,`2020-07-13-1221`
,`2020-07-13-1260`
,`2020-07-13-1145`
,`2020-07-13-1265`
,`2020-07-13-1139`
,`2020-07-13-1254`
,`2020-07-13-1091`
,`2020-07-13-1258`
,`2020-07-13-377`
,`2020-07-13-6`
,`2020-07-13-1077`
,`2020-07-13-1175`
,`2020-07-13-1105`
,`2020-07-13-1256`
,`2020-07-13-1044`
,`2020-07-13-1112`
,`2020-07-13-750`
,`2020-07-13-1115`
,`2020-07-13-1117`
,`2020-07-13-1191`
,`2020-07-13-479`
,`2020-07-13-1079`
,`2020-07-13-1009`
,`2020-07-13-1148`
,`2020-07-13-1150`
,`2020-07-13-38`
,`2020-07-13-1`
,`2020-07-13-709`
,`2020-07-13-789`
,`2020-07-13-1149`
,`2020-07-13-1088`
,`2020-07-13-1086`
,`2020-07-13-779`
,`2020-07-13-718`
,`2020-07-13-702`
,`2020-07-13-22`
,`2020-07-13-1095`
,`2020-07-13-724`
,`2020-07-13-730`
,`2020-07-13-982`
,`2020-07-13-1122`
,`2020-07-13-477`
,`2020-07-13-44`
,`2020-07-13-45`
,`2020-07-13-774`
,`2020-07-13-1138`
,`2020-07-13-1011`
,`2020-07-13-741`
,`2020-07-13-1127`
,`2020-07-13-30`
,`2020-07-13-1090`
,`2020-07-13-740`
,`2020-07-13-747`
,`2020-07-13-486`
,`2020-07-13-707`
,`2020-07-13-1110`
,`2020-07-13-703`
,`2020-07-13-744`
,`2020-07-13-771`
,`2020-07-13-790`
,`2020-07-13-713`
,`2020-07-13-732`
,`2020-07-13-1182`
,`2020-07-13-986`
,`2020-07-13-712`
,`2020-07-13-1114`
,`2020-07-13-742`
,`2020-07-13-1082`
,`2020-07-13-729`
,`2020-07-13-1147`
)
suma <- sapply(lista, function(x) sum(x$dist, na.rm = FALSE))
suma
suma <- sapply(lista, function(x) sum(x$dist, na.rm = TRUE))
suma
suma <- as.data.frame(sapply(lista, function(x) sum(x$dist, na.rm = TRUE)))
rango <- sapply(mylist, function(x) range(x$CST6CDT, na.rm = TRUE))
rango_t <- data.frame(t(rango))
jul_13 <- cbind(unicos, suma)
jul_13 <- cbind(jul_13, range_t)
jul_13 <- cbind(jul_13, rango_t)
rango <- sapply(lista, function(x) range(x$CST6CDT, na.rm = TRUE))
rango_t <- data.frame(t(rango))
jul_13 <- cbind(jul_13, rango_t)
View(jul_13)
lubridate::as_datetime(jul_13$X1)
lubridate::as_datetime(jul_13$X2)
lubridate::as_datetime(jul_13$X1)
lubridate::as_datetime(jul_13$X1) - lubridate::as_datetime(jul_13$X2)
lubridate::as_datetime(jul_13$X2) - lubridate::as_datetime(jul_13$X1)
jul_13_x2<- lubridate::as_datetime(jul_13$X2)
jul_13_x1<- lubridate::as_datetime(jul_13$X1)
jul_13$X2-jul_13$X1
jul_13$hrs<- lubridate::as_datetime(jul_13$X2) - lubridate::as_datetime(jul_13$X1)
View(jul_13)
jul_13$hrs <- jul_13/60
View(jul_13)
jul_13 <- cbind(unicos, suma)
jul_13 <- cbind(jul_13, rango_t)
jul_13$hrs<- lubridate::as_datetime(jul_13$X2) - lubridate::as_datetime(jul_13$X1)
jul_13$hrs <- jul_13$hrs/60/60
View(jul_13)
View(jul_13)
names(jul_13) <- c("id_vehicle", "distancia", "t1", "t2", "horas")
View(jul_13)
jul_13$velocidad <- jul_13$distancia/jul_13$horas
class(jul_13$horas)
jul_13$horas <- as.numeric(jul_13$horas)
jul_13$velocidad <- jul_13$distancia/jul_13$horas
names(jul_13) <- c("id_vehicle", "distancia", "t1", "t2", "tiempo", "velocidad")
View(jul_13)
write.csv(jul_13, "/Users/85412/Desktop/gtfs_rt/julio/jul_13.csv")
names(jul_13) <- c("id_vehicle", "distancia", "t1", "t2", "tiempo", "velocidad")
write.csv(jul_13, "/Users/85412/Desktop/gtfs_rt/julio/jul_13.csv")
df_list = mget(ls(pattern = "df[2020]"))
View(df_list)
df_list = mget(ls(pattern = "df[jul]"))
df_list = mget(ls(pattern = "jul"))
View(df_list)
df_list = mget(ls(pattern = "2020"))
mylist_ = mget(ls(pattern = "2020-07-13-")) # con este comando agrega los dataframes con un patrón a la lista
View(lista)
View(mylist)
>>>>>>> 964d191a37ab43743bd2e1f8416a0e487d70df5d
julio <- readr::read_csv("C:/Users/85412/Desktop/gtfs_rt/julio.csv")
julio$CST6CDT <- lubridate::as_datetime(julio$TIMESTAMP, tz="CST6CDT")
colnames(julio)[9] <- "LATITUDE"
julio$LATITUDE <- stringr::str_sub(julio$LATITUDE, 10,-1)
julio$LATITUDE <- as.numeric(julio$LATITUDE)
julio$VEHICLE <- stringr::str_sub(julio$VEHICLE, 4,-1)
julio$as_date<- lubridate::as_date(julio$CST6CDT)
julio$as_hour <- lubridate::hour(julio$CST6CDT)
julio$id_vehicle <- paste(julio$as_date, julio$VEHICLE, sep="-")
julio <- julio %>%  select(id_vehicle, Id, TIMESTAMP, VEHICLE, ROUTEID, STARTTIME, STARTDATE, SCHEDULE_RELATIONSHIP, LABEL, LATITUDE, LONGITUDE, BEARING, ODOMETER, SPEED, CURRENTSTATUS, LECTURA, CST6CDT, as_date, as_hour) %>% filter(as_hour == "6" | as_hour=="7" | as_hour=="8" | as_hour=="9"| as_hour=="10" | as_hour=="11"| as_hour=="12"| as_hour=="13"| as_hour=="14"| as_hour=="15"| as_hour=="16"| as_hour=="17"| as_hour=="18"| as_hour=="19" | as_hour=="20"| as_hour=="21"| as_hour=="22"| as_hour=="23")
<<<<<<< HEAD
library(dplyr)
julio <- julio %>%  select(id_vehicle, Id, TIMESTAMP, VEHICLE, ROUTEID, STARTTIME, STARTDATE, SCHEDULE_RELATIONSHIP, LABEL, LATITUDE, LONGITUDE, BEARING, ODOMETER, SPEED, CURRENTSTATUS, LECTURA, CST6CDT, as_date, as_hour) %>% filter(as_hour == "6" | as_hour=="7" | as_hour=="8" | as_hour=="9"| as_hour=="10" | as_hour=="11"| as_hour=="12"| as_hour=="13"| as_hour=="14"| as_hour=="15"| as_hour=="16"| as_hour=="17"| as_hour=="18"| as_hour=="19" | as_hour=="20"| as_hour=="21"| as_hour=="22"| as_hour=="23")
jul_15 <- julio %>%  select(id_vehicle, Id, TIMESTAMP, VEHICLE, ROUTEID, STARTTIME, STARTDATE, SCHEDULE_RELATIONSHIP, LABEL, LATITUDE, LONGITUDE, BEARING, ODOMETER, SPEED, CURRENTSTATUS, LECTURA, CST6CDT, as_date, as_hour) %>% filter(as_date == "2020-07-15")
gtfs_estatico<-sf::st_read("/Users/85412/Desktop/gtfs_estatico/gtfs_estatico.shp")
gtfs_estatico <- gtfs_estatico %>%  select(agencia, ruta, geometry) %>% filter(agencia == "METROBUS")
gtfs_estatico$agencia <- NULL
jul_15p<- sf::st_as_sf(jul_15, coords = c("LONGITUDE", "LATITUDE"), crs = 4326, agr = "constant")
jul_15_jn <- sf::st_join(jul_13p, gtfs_estatico, join = nngeo::st_nn, maxdist = 100)# Debe correrse library(nngeo) para que trabaje el st_nn
jul_15_jn <- sf::st_join(jul_15p, gtfs_estatico, join = nngeo::st_nn, maxdist = 100)# Debe correrse library(nngeo) para que trabaje el st_nn
jul_15_jn <-jul_15_jn %>% select(., id_vehicle, geometry, CST6CDT, ruta) %>% filter(ruta=="00L1" |ruta=="00L2")
jul_15_coords<- sf::st_coordinates(jul_15_jn)
jul_15_jn <- cbind(jul_15_jn, jul_15_coords)
jul_fun <- function(i,j) {
j<-jul_15_jn %>% select(id_vehicle, Y, X, CST6CDT) %>% filter(jul_15_jn$id_vehicle==i) %>%
mutate(., y_lead=lead(Y, n=1)) %>% mutate(., x_lead=lead(X, n=1))
mutate(j, dist = TrackReconstruction::CalcDistance(j$Y, j$X, j$y_lead, j$x_lead))
}
for (i in jul_15_jn$id_vehicle) {
assign (i, data.frame(jul_fun(i)))
}
unicos <- as.data.frame(unique(jul_15_jn$id_vehicle))
lista <- mget(ls(pattern = "2020-07-15-")) # con este comando agrega los dataframes con un patrón a la lista
suma <- as.data.frame(sapply(lista, function(x) sum(x$dist, na.rm = TRUE)))
rango <- sapply(lista, function(x) range(x$CST6CDT, na.rm = TRUE))
rango_t <- data.frame(t(rango))
jul_15 <- cbind(unicos, suma)
jul_15 <- cbind(jul_15, rango_t)
jul_15$hrs<- lubridate::as_datetime(jul_15$X2) - lubridate::as_datetime(jul_15$X1)
jul_15$hrs <- jul_15$hrs/60/60
jul_15$horas <- as.numeric(jul_15$horas)
View(jul_15)
jul_15$hrs <- as.numeric(jul_15$hrs)
jul_15$velocidad <- jul_15$distancia/jul_15$hrs
View(jul_15)
jul_15$velocidad <- jul_15$distancia/jul_15$hrs
names(jul_15)
jul_15$velocidad <- jul_15$`sapply(lista, function(x) sum(x$dist, na.rm = TRUE))`/jul_15$hrs
names(jul_15) <- c("id_vehicle", "distancia", "t1", "t2", "tiempo", "velocidad")
write.csv(jul_15, "/Users/85412/Desktop/gtfs_rt/julio/jul_15.csv")
=======
jul_13 <- julio %>%  select(id_vehicle, Id, TIMESTAMP, VEHICLE, ROUTEID, STARTTIME, STARTDATE, SCHEDULE_RELATIONSHIP, LABEL, LATITUDE, LONGITUDE, BEARING, ODOMETER, SPEED, CURRENTSTATUS, LECTURA, CST6CDT, as_date, as_hour) %>% filter(as_date == "2020-07-14")
jul_13 <- NULL
jul_14 <- julio %>%  select(id_vehicle, Id, TIMESTAMP, VEHICLE, ROUTEID, STARTTIME, STARTDATE, SCHEDULE_RELATIONSHIP, LABEL, LATITUDE, LONGITUDE, BEARING, ODOMETER, SPEED, CURRENTSTATUS, LECTURA, CST6CDT, as_date, as_hour) %>% filter(as_date == "2020-07-14")
gtfs_estatico<-sf::st_read("/Users/85412/Desktop/gtfs_estatico/gtfs_estatico.shp")
gtfs_estatico <- gtfs_estatico %>%  select(agencia, ruta, geometry) %>% filter(agencia == "METROBUS")
gtfs_estatico$agencia <- NULL
jul_14p<- sf::st_as_sf(jul_14, coords = c("LONGITUDE", "LATITUDE"), crs = 4326, agr = "constant")
jul_14_jn <- sf::st_join(jul_14p, gtfs_estatico, join = nngeo::st_nn, maxdist = 100)# Debe correrse library(nngeo) para que trabaje el st_nn
jul_14_jn <-jul_14_jn %>% select(., id_vehicle, geometry, CST6CDT, ruta) %>% filter(ruta=="00L1" |ruta=="00L2")
jul_14_coords<- sf::st_coordinates(jul_14_jn)
jul_14_jn <- cbind(jul_14_jn, jul_14_coords)
jul_fun <- function(i,j) {
j<-jul_14_jn %>% select(id_vehicle, Y, X, CST6CDT) %>% filter(jul_14_jn$id_vehicle==i) %>%
mutate(., y_lead=lead(Y, n=1)) %>% mutate(., x_lead=lead(X, n=1))
mutate(j, dist = TrackReconstruction::CalcDistance(j$Y, j$X, j$y_lead, j$x_lead))
}
for (i in jul_14_jn$id_vehicle) {
assign (i, data.frame(jul_fun(i)))
}
lista <- mget(ls(pattern = "2020-07-14-")) # con este comando agrega los dataframes con un patrón a la lista
suma <- as.data.frame(sapply(lista, function(x) sum(x$dist, na.rm = TRUE)))
rango <- sapply(lista, function(x) range(x$CST6CDT, na.rm = TRUE))
rango_t <- data.frame(t(rango))
jul_13 <- cbind(unicos, suma)
jul_14 <- cbind(unicos, suma)
unicos <- as.data.frame(unique(jul_13_jn$id_vehicle))
unicos <- as.data.frame(unique(jul_14_jn$id_vehicle))
jul_14 <- cbind(unicos, suma)
jul_14 <- cbind(jul_14, rango_t)
jul_14$hrs<- lubridate::as_datetime(jul_14$X2) - lubridate::as_datetime(jul_14$X1)
jul_14$hrs <- jul_14$hrs/60/60
jul_14$horas <- as.numeric(jul_14$horas)
View(jul_14)
jul_13$velocidad <- jul_13$distancia/jul_13$horas
names(jul_13) <- c("id_vehicle", "distancia", "t1", "t2", "tiempo", "velocidad")
write.csv(jul_14, "/Users/85412/Desktop/gtfs_rt/julio/jul_14.csv")
names(jul_14) <- c("id_vehicle", "distancia", "t1", "t2", "tiempo", "velocidad")
jul_14$hrs<- lubridate::as_datetime(jul_14$X2) - lubridate::as_datetime(jul_14$X1)
jul_14$hrs <- jul_14$hrs/60/60
jul_14$velocidad <- jul_14$distancia/jul_14$horas
jul_14$hrs<- lubridate::as_datetime(jul_14$X2) - lubridate::as_datetime(jul_14$X1)
View(jul_14)
jul_14$hrs <- as.numeric(jul_14$hrs)
jul_14$hrs <- jul_14$hrs/60/60
jul_14$velocidad <- jul_14$distancia/jul_14$horas
View(jul_14)
jul_14$velocidad <- jul_14$`sapply(lista, function(x) sum(x$dist, na.rm = TRUE))`/jul_14$horas
View(jul_14)
jul_14$velocidad <- jul_14$`sapply(lista, function(x) sum(x$dist, na.rm = TRUE))`/jul_14$hrs
names(jul_14) <- c("id_vehicle", "distancia", "t1", "t2", "tiempo", "velocidad")
write.csv(jul_14, "/Users/85412/Desktop/gtfs_rt/julio/jul_14.csv")
write.csv(jul_14, "/Users/85412/Desktop/gtfs_rt/julio/jul_14.csv")
>>>>>>> 964d191a37ab43743bd2e1f8416a0e487d70df5d
lineas.metrobus <- sf::st_read("D:/Escritorio/lineas.metrobus/lineas-metrobus.shp")
jul.jn <- read.csv("C:/Users/rdelatorre/Desktop/gtfs.metrobus/jul/jul.jn.csv")
jul.jn <-  jul.jn %>% select(Id, TIMESTAMP,LECTURA, geometry)
library(dplyr)
jul.jn <-  jul.jn %>% select(Id, TIMESTAMP,LECTURA, geometry)
names(jul.jn) <- c("timestamp", "vehicle", "x", "y")
jul.jn$vehicle <- substr(jul.jn$vehicle, 4, 100000)
jul.jn$vehicle <- as.factor(jul.jn$vehicle)
jul.jn$x <- chartr("c(", "  ", jul.jn$x)
jul.jn$x <- as.numeric(jul.jn$x)
jul.jn$y <- chartr(")", " ", jul.jn$y)
jul.jn$y <- as.numeric(jul.jn$y)
jul.jn$cstlcdt<- lubridate::as_datetime(jul.jn$timestamp, tz="CST6CDT")
#Union de la base jul.jn con las líneas de Metrobus. Desde aquí vamos preparando el código para quedarnos con la línea 1.
jul.jn <- sf::st_as_sf(jul.jn, coords = c("x", "y"), crs = 4326, agr = "constant") #Convertir la base jul.jn en una con campo geométrico.
est.l1 <- sf::st_join(jul.jn, lineas.metrobus, join = sf::st_nearest_feature, left = T)
#Separar claves de Metrobus para poder seleccionar la línea 1. Seleccionar línea 1.
est.l1$l.mbus <- substr(est.l1$name, 1, 4)
est.l1<- est.l1 %>% select(timestamp, vehicle, cstlcdt, name, nombre, geometry, l.mbus) %>% filter(l.mbus=="MB01")
#Unir con las estaciones de la línea 1.
l1.mbus.est <- sf::st_read("D:/Escritorio/gtfs_estatico/l1.mbus.est.shp")
#Continuar con la union
l1.mbus.est <- sf::st_join(est.l1, l1.mbus.est, join=sf::st_nearest_feature, left= T)
l1.mbus.est <-l1.mbus.est %>%  select(timestamp, vehicle, cstlcdt, nombre.y, lon, lat)
l1.mbus.est<- as.data.frame(sort(l1.mbus.est$vehicle, decreasing = FALSE, na.last = TRUE))
l1.mbus.est %>% select(timestamp, vehicle, cstlcdt, nombre.y, geometry) %>% filter(vehicle=="1")
l1.mbus.est <- sf::st_read("D:/Escritorio/gtfs_estatico/l1.mbus.est.shp")
l1.mbus.est <- sf::st_join(est.l1, l1.mbus.est, join=sf::st_nearest_feature, left= T)
l1.mbus.est <-l1.mbus.est %>%  select(timestamp, vehicle, cstlcdt, nombre.y, lon, lat)
l1.mbus.est
as.data.frame(sort(l1.mbus.est$vehicle, decreasing = FALSE, na.last = TRUE))
as.data.frame(sort(l1.mbus.est$vehicle, decreasing = FALSE, na.last = TRUE))
final<- as.data.frame(sort(l1.mbus.est$vehicle, decreasing = FALSE, na.last = TRUE))
l1.mbus.est
l1.mbus.est$day<- lubridate::day(l1.mbus.est$timestamp)
l1.mbus.est$hour<- lubridate::hour(l1.mbus.est$timestamp)
l1.mbus.est$day<- lubridate::day(l1.mbus.est$timestamp)
l1.mbus.est$day<- lubridate::day(l1.mbus.est$timestamp)
l1.mbus.est$day<- lubridate::day(l1.mbus.est$timestamp, tz="CST6CDT")
l1.mbus.est$day<- lubridate::day(l1.mbus.est$timestamp, tz="CST6CDT")
l1.mbus.est$day<- lubridate::day(l1.mbus.est$timestamp, tz="CST6CDT")
l1.mbus.est$day<- lubridate::day(l1.mbus.est$timestamp)
l1.mbus.est$day<- lubridate::day(l1.mbus.est$cstlcdt)
l1.mbus.est$hour<- lubridate::hour(l1.mbus.est$cstlcdt)
head(l1.mbus.est$day)
head(l1.mbus.est$hour)
l1.mbus.est$id.vehi <- paste0(jul.l1$day, sep=".", jul.l1$hour)
l1.mbus.est$id.vehi <- paste0(l1.mbus.est$day, sep=".", jul.l1$hour)
l1.mbus.est$id.vehi <- paste0(l1.mbus.est$day, sep=".", l1.mbus.est$hour)
head(l1.mbus.est$id.vehi)
unicos<- unique((l1.mbus.est$vehicle))
for (i in unicos) {
assign(paste0("jul", sep=".", i), data.frame(l1.mbus.est %>%  select(timestamp, vehicle, cstlcdt, nombre.y, lon, lat ) %>% filter (jul.l1$vehicle==i)))
}
for (i in unicos) {
assign(paste0("jul", sep=".", i), data.frame(l1.mbus.est %>%  select(timestamp, vehicle, cstlcdt, nombre.y, lon, lat ) %>% filter (l1.mbus.estvehicle==i)))
}
for (i in unicos) {
assign(paste0("jul", sep=".", i), data.frame(l1.mbus.est %>%  select(timestamp, vehicle, cstlcdt, nombre.y, lon, lat ) %>% filter (l1.mbus.est$vehicle==i)))
}
for (i in unicos) {
assign(paste0("vehi", sep=".", i), data.frame(l1.mbus.est %>%  select(timestamp, vehicle, cstlcdt, nombre.y, lon, lat ) %>% filter (l1.mbus.est$vehicle==i)))
}
lista <- mget(ls(pattern = "vehi.")) # aquí están los vehículos
lista01 <- lista
lista01 <- lapply(lista01, function(x) mutate(x, y.l=lead(y, n=1)))
lista01 <- lapply(lista01, function(x) mutate(x, x.l=lead(x, n=1)))
lista01 <- lapply(lista01, function (j) mutate(j, dist = TrackReconstruction::CalcDistance(j$y, j$x, j$y.l, j$x.l)))#Da la distancia en kilómetros
lista02 <- lapply(lista01, function(k) mutate(k, dia = lubridate::day(k$cstlcdt)))
lista02 <- lapply(lista01, function(k) mutate(k, hora = lubridate::hour(k$cstlcdt)))
lista01 <- lapply(lista01, function(x) mutate(x, y.l=lead(y, n=1)))
lista01 <- lapply(lista01, function(x) mutate(x, y.l=lead(lat, n=1)))
lista01 <- lapply(lista01, function(x) mutate(x, x.l=lead(lon, n=1)))
lista01 <- lapply(lista01, function (j) mutate(j, dist = TrackReconstruction::CalcDistance(j$lat, j$lon, j$y.l, j$x.l)))#Da la distancia en kilómetros
lista02 <- lapply(lista01, function(k) mutate(k, dia = lubridate::day(k$cstlcdt)))
lista02 <- lapply(lista01, function(k) mutate(k, hora = lubridate::hour(k$cstlcdt)))
lista02$vehi.1
suma <- sapply(lista02, function(x) sum(x$dist, na.rm = TRUE))
rango <- sapply(lista02, function(x) range(x$cstlcdt, na.rm = TRUE))
rango_t <- data.frame(t(rango))
rango_t
suma
lista02 <- lista
lista02 <- lapply(lista01, function(x) mutate(x, y.l=lead(lat, n=1)))
lista02 <- lapply(lista01, function(x) mutate(x, x.l=lead(lon, n=1)))
lista02 <- lapply(lista01, function (j) mutate(j, dist = TrackReconstruction::CalcDistance(j$lat, j$lon, j$y.l, j$x.l)))#Da la distancia en kilómetros
lista02 <- lapply(lista01, function(k) mutate(k, dia = lubridate::day(k$cstlcdt)))
lista02 <- lapply(lista01, function(k) mutate(k, hora = lubridate::hour(k$cstlcdt)))
suma <- sapply(lista02, function(x) sum(x$dist, na.rm = TRUE))
rango <- sapply(lista02, function(x) range(x$cstlcdt, na.rm = TRUE))
rango_t <- data.frame(t(rango))
suma
lista02 <- lista
lista02 <- lapply(lista02, function(x) mutate(x, y.l=lead(lat, n=1)))
lista02 <- lapply(lista02, function(x) mutate(x, x.l=lead(lon, n=1)))
lista02 <- lapply(lista02, function (j) mutate(j, dist = TrackReconstruction::CalcDistance(j$lat, j$lon, j$y.l, j$x.l)))#Da la distancia en kilómetros
lista02 <- lapply(lista02, function(k) mutate(k, dia = lubridate::day(k$cstlcdt)))
lista02 <- lapply(lista02, function(k) mutate(k, hora = lubridate::hour(k$cstlcdt)))
suma <- sapply(lista02, function(x) sum(x$dist, na.rm = TRUE))
rango <- sapply(lista02, function(x) range(x$cstlcdt, na.rm = TRUE))
rango_t <- data.frame(t(rango))
suma
lista02
lista02[1]
lista02 <- lapply(lista02, function(x) mutate(x, y.l=lead(lat, n=1)))
View(lista02)
View(lista02)
lista02 <- lapply(lista02, function(x) mutate(x, y.l=as.numeric(y.l))
lista02 <- lapply(lista02, function(x) mutate(x, y.l=as.numeric(y.l)))
lista02 <- lapply(lista02, function(x) mutate(x, y.l=as.numeric(y.l)))
View(lista02)
lista02 <- lapply(lista02, function(x) mutate(x, lat=as.numeric(lat)))
lista02 <- lapply(lista02, function(x) mutate(x, lat=as.numeric(lon)))
lista02 <- lapply(lista02, function(x) mutate(x, y.l=lead(lat, n=1)))
lista02 <- lapply(lista02, function(x) mutate(x, y.l=as.numeric(y.l)))
View(lista02)
View(lista02)
lista02 <- lapply(lista02, function(x) mutate(x, lat=unfactor(lon)))
installed.packages("dmm")
lista02 <- lapply(lista02, function(x) mutate(x, lat=as.character(lon)))
lista02 <- lapply(lista02, function(x) mutate(x, lat=as.numeric(lon)))
View(lista01)
lista02 <- lapply(lista02, function(x) mutate(x, lat=as.numeric(lat)))
View(lista01)
lista02 <- lapply(lista02, function(x) mutate(x, lat=as.numeric(lat)))
View(lista01)
View(lista02)
lista02 <- lapply(lista02, function(x) mutate(x, lat=as.double(lon)))
View(lista02)
lineas.metrobus <- sf::st_read("D:/Escritorio/lineas.metrobus/lineas-metrobus.shp")
jul.jn <- read.csv("C:/Users/rdelatorre/Desktop/gtfs.metrobus/jul/jul.jn.csv")
jul.jn <-  jul.jn %>% select(Id, TIMESTAMP,LECTURA, geometry)
names(jul.jn) <- c("timestamp", "vehicle", "x", "y")
jul.jn$vehicle <- substr(jul.jn$vehicle, 4, 100000)
jul.jn$vehicle <- as.factor(jul.jn$vehicle)
jul.jn$x <- chartr("c(", "  ", jul.jn$x)
jul.jn$x <- as.numeric(jul.jn$x)
jul.jn$y <- chartr(")", " ", jul.jn$y)
jul.jn$y <- as.numeric(jul.jn$y)
jul.jn$cstlcdt<- lubridate::as_datetime(jul.jn$timestamp, tz="CST6CDT")
apply(jul.jn,2,class)
class(jul.jn$x)
class(jul.jn$y)
jul.jn <- sf::st_as_sf(jul.jn, coords = c("x", "y"), crs = 4326, agr = "constant") #Convertir la base jul.jn en una con campo geométrico.
est.l1 <- sf::st_join(jul.jn, lineas.metrobus, join = sf::st_nearest_feature, left = T)
View(jul.10000)
View(jul.10001)
View(jul.996)
l1.mbus.est <- sf::st_read("D:/Escritorio/gtfs_estatico/est.l1.shp")
unique(l1.mbus.est)
unique(l1.mbus.est$nombre)
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "Buenavista. LÃ­nea 1.", "Buenavista")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "Plaza de la RepÃºblica", "Plaza de la Republica")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "Ã\u0081lvaro ObregÃ³n", "Alvaro Obregon")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "Dr. GÃ¡lvez", "Dr. Galvez")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "Manuel GonzÃ¡lez", "Manuel Gonzalez")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "RevoluciÃ³n", "Revolucion")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "La Raza. LÃ­nea 1.", "La Raza")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "San SimÃ³n", "San Simon")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "Nuevo LeÃ³n", "Nuevo Leon")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "NÃ¡poles", "Napoles")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "Santa Ãšrsula", "Santa Ursula")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "RÃ­o Churubusco", "Rio Churubusco")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "Villa OlÃ­mpica", "Villa Olimpica")
l1.mbus.est$nombre<- stringr::str_replace(l1.mbus.est$nombre, "JosÃ© MarÃ­a Velasco", "Jose Maria Velasco")
sf::st_write(l1.mbus.est, "D:/Escritorio/gtfs_estatico/l1.mbus.est.shp")
sf::st_write(l1.mbus.est, "D:/Escritorio/gtfs_estatico/l1.mbus.est2.shp")
lineas.metrobus <- sf::st_read("D:/Escritorio/lineas.metrobus/lineas-metrobus.shp")
jul.jn <- read.csv("C:/Users/rdelatorre/Desktop/gtfs.metrobus/jul/jul.jn.csv")
jul.jn <- read.csv("C:/Users/rdelatorre/Desktop/gtfs.metrobus/jul/jul.jn.csv")
names(jul.jn)
jul.jn <-  jul.jn %>% select(Id, TIMESTAMP,LECTURA, geometry)
#Cambiar nombres de las variables
names(jul.jn) <- c("timestamp", "vehicle", "x", "y")
jul.jn$vehicle <- substr(jul.jn$vehicle, 4, 100000)
jul.jn$vehicle <- as.factor(jul.jn$vehicle)
jul.jn$x <- chartr("c(", "  ", jul.jn$x)
jul.jn$x <- as.numeric(jul.jn$x)
jul.jn$y <- chartr(")", " ", jul.jn$y)
jul.jn$y <- as.numeric(jul.jn$y)
jul.jn$cstlcdt<- lubridate::as_datetime(jul.jn$timestamp, tz="CST6CDT")
class(jul.jn$x)
class(jul.jn$y)
jul.jn <- sf::st_as_sf(jul.jn, coords = c("x", "y"), crs = 4326, agr = "constant") #Convertir la base jul.jn en una con campo geométrico.
est.l1 <- sf::st_join(jul.jn, lineas.metrobus, join = sf::st_nearest_feature, left = T)
sys.time()
Sys.time()
Sys.time()
jul.jn <- sf::st_as_sf(jul.jn, coords = c("x", "y"), crs = 4326, agr = "constant") #Convertir la base jul.jn en una con campo geométrico.
est.l1 <- sf::st_join(jul.jn, lineas.metrobus, join = sf::st_nearest_feature, left = T)
Sys.time()
#Separar claves de Metrobus para poder seleccionar la línea 1. Seleccionar línea 1.
Sys.time()
est.l1$l.mbus <- substr(est.l1$name, 1, 4)
est.l1<- est.l1 %>% select(timestamp, vehicle, cstlcdt, name, nombre, geometry, l.mbus) %>% filter(l.mbus=="MB01")
Sys.time()
